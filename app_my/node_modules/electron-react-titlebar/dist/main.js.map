{"version":3,"file":"main.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,sCCLvD,MAAM,EAA+BC,QAAQ,YCE7C,IASaC,EAAa,WACxBC,EAAAA,QAAAA,OAAe,sCAAsC,SAACC,EAAOC,GAC3D,IAAMC,EAAgBD,EAClBE,EAAAA,cAAAA,OAAqBF,GACrBE,EAAAA,cAAAA,gBAA8BH,EAAMI,QACxC,GAAIF,EAEF,OAhBqB,SAACA,EAA8BE,GACxDF,EAAcG,YAAY,YAAY,WACpCD,EAAOE,KAAK,6CAA6C,EAAMJ,EAAcK,OAE/EL,EAAcG,YAAY,cAAc,WACtCD,EAAOE,KAAK,6CAA6C,EAAOJ,EAAcK,OAU5EC,CAAmBN,EAAeF,EAAMI,QACjCF,EAAcK,MAKzBR,EAAAA,QAAAA,GAAW,0CAA0C,SAACC,EAAOC,GAC3D,IAAMC,EAAgBD,EAClBE,EAAAA,cAAAA,OAAqBF,GACrBE,EAAAA,cAAAA,gBAA8BH,EAAMI,QACpCF,MAAAA,GAAAA,EAAeO,kBACbP,EAAcQ,cAChBR,EAAcS,aAEdT,EAAcU,eAKpBb,EAAAA,QAAAA,GAAW,0CAA0C,SAACC,EAAOC,GAC3D,IAAMC,EAAgBD,EAClBE,EAAAA,cAAAA,OAAqBF,GACrBE,EAAAA,cAAAA,gBAA8BH,EAAMI,QACxCF,MAAAA,GAAAA,EAAeW,cAGjBd,EAAAA,QAAAA,GAAW,iCAAiC,SAACC,EAAOC,GAClD,IAAMC,EAAgBD,EAClBE,EAAAA,cAAAA,OAAqBF,GACrBE,EAAAA,cAAAA,gBAA8BH,EAAMI,QACxCF,MAAAA,GAAAA,EAAeY,Y","sources":["webpack://electron-react-titlebar/webpack/bootstrap","webpack://electron-react-titlebar/webpack/runtime/define property getters","webpack://electron-react-titlebar/webpack/runtime/hasOwnProperty shorthand","webpack://electron-react-titlebar/webpack/runtime/make namespace object","webpack://electron-react-titlebar/external commonjs \"electron\"","webpack://electron-react-titlebar/./src/main/setup.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { ipcMain, BrowserWindow, WebContents } from 'electron'\n\nconst setupEventListener = (browserWindow: BrowserWindow, sender: WebContents) => {\n  browserWindow.addListener('maximize', () => {\n    sender.send('electron-react-titlebar/maximunize/change', true, browserWindow.id)\n  })\n  browserWindow.addListener('unmaximize', () => {\n    sender.send('electron-react-titlebar/maximunize/change', false, browserWindow.id)\n  })\n}\n\nexport const initialize = (): void => {\n  ipcMain.handle('electron-react-titlebar/initialize', (event, browserWindowId: number): number | undefined => {\n    const browserWindow = browserWindowId\n      ? BrowserWindow.fromId(browserWindowId)\n      : BrowserWindow.fromWebContents(event.sender)\n    if (browserWindow) {\n      setupEventListener(browserWindow, event.sender)\n      return browserWindow.id\n    }\n    return undefined\n  })\n\n  ipcMain.on('electron-react-titlebar/maximumize/set', (event, browserWindowId: number) => {\n    const browserWindow = browserWindowId\n      ? BrowserWindow.fromId(browserWindowId)\n      : BrowserWindow.fromWebContents(event.sender)\n    if (browserWindow?.isMaximizable()) {\n      if (browserWindow.isMaximized()) {\n        browserWindow.unmaximize()\n      } else {\n        browserWindow.maximize()\n      }\n    }\n  })\n\n  ipcMain.on('electron-react-titlebar/minimumize/set', (event, browserWindowId: number) => {\n    const browserWindow = browserWindowId\n      ? BrowserWindow.fromId(browserWindowId)\n      : BrowserWindow.fromWebContents(event.sender)\n    browserWindow?.minimize()\n  })\n\n  ipcMain.on('electron-react-titlebar/close', (event, browserWindowId: number) => {\n    const browserWindow = browserWindowId\n      ? BrowserWindow.fromId(browserWindowId)\n      : BrowserWindow.fromWebContents(event.sender)\n    browserWindow?.close()\n  })\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","initialize","ipcMain","event","browserWindowId","browserWindow","BrowserWindow","sender","addListener","send","id","setupEventListener","isMaximizable","isMaximized","unmaximize","maximize","minimize","close"],"sourceRoot":""}